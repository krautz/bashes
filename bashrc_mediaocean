# Media Ocean Bash

# ---------------------------------------------------------------------- #
# --------------------------- VARIABLES -------------------------------- #
# ---------------------------------------------------------------------- #

# Project path
MEDIAOCEAN_PATH='/home/ckrauthamer/mediaocean/voxsupFrontend2/services'

# Default virtual env name
DEFAULT_VIRTUAL_ENV='env'

# MariaDB
MARIADB_USER='root'
MARIADB_PASSWORD='pass'
MARIADB_HOST='localhost'

# Postgres
POSTGRES_USER='postgres'
PGPASSWORD='pass'
POSTGRES_HOST='localhost'

# ---------------------------------------------------------------------- #
# ------------------------------ ALIAS --------------------------------- #
# ---------------------------------------------------------------------- #

alias connectdeploy='sshuttle -r ckrauthamer@build.4cinsights.com 172.16.0.0/16'
alias ctvstart='bash debug run'
alias entermysql="mysql -u $MARIADB_USER -p$MARIADB_PASSWORD -h $MARIADB_HOST -A"
alias enterpsql="psql -U$POSTGRES_USER -h $POSTGRES_HOST"
alias gclm='gitconfiglocalmediaocean'
alias installprecommit='pre-commit install --overwrite'
alias lint='pre-commit'
alias vf2shell='python ./server/manage.py shell'
alias vf2start='tools/debug'
alias sm='gf main && gb -D nbcu-master || : && gco -t main/nbcu-master && gco -'

# ---------------------------------------------------------------------- #
# ---------------------------- FUNCTIONS-------------------------------- #
# ---------------------------------------------------------------------- #


# Activate virtual env on current dir
# USAGE
#   1 - activate [environemnt name (default: env)]
activate()
{
    # no env name provided: using default env
    if [ -z $1 ]
    then
        source $DEFAULT_VIRTUAL_ENV/bin/activate
    else
        source $1/bin/activate
    fi
}


# Apply a mysql dump
# USAGE: applymysqldump <db name> [<table_name>]
applymysqldump()
{
    # no table provided: dump from db dump file
    if [ -z "$2" ]
    then
        pv $1.sql | mysql -u $MARIADB_USER -p$MARIADB_PASSWORD -h $MARIADB_HOST $1

    # table provided: dump from table file
    else
        pv "$1___${2// /__}.sql" | mysql -u $MARIADB_USER -p$MARIADB_PASSWORD -h $MARIADB_HOST $1 
    fi
}


# Apply a psql dump
# USAGE: applypsqldump <db name> [<table_names (separated by a whitespace)>]
applypsqldump()
{
    # no table provided: dump from db dump file
    if [ -z "$2" ]
    then
        psql -U$POSTGRES_USER -h $POSTGRES_HOST $1 < $1.psql

    # table provided: dump from table file
    else
        psql -U$POSTGRES_USER -h $POSTGRES_HOST $1 < "$1___${2// /__}.psql"
    fi
}

# Copy bash files to remote machines
# USAGE: copybashtoremotemachine <machine name>
copybashtoremotemachine()
{
    if [ -z $1 ]
    then
        printf "Machine name not provided\n"
    else
        scp ~/.bashrc_remote $1:.bashrc
        scp ~/.bashrc_mediaocean_remote $1:.bashrc_mediaocean
        scp ~/.gitconfig_remote $1:.gitconfig
        scp ~/.bashrc_git $1:.bashrc_git
        scp ~/.screenrc $1:.screenrc
        scp ~/.vimrc $1:.vimrc
        printf "Remember to update environment variables on .bashrc_mediaocean!\n"
    fi
}

# Genetare a mysql dump
# USAGE: generatemysqldump <db name> [<table name>]
generatemysqldump()
{
    # no table provided: dump all the db
    if [ -z "$2" ]
    then
        mysqldump -t -u $MARIADB_USER -p$MARIADB_PASSWORD -h $MARIADB_HOST $1 | pv > $1.sql

    # table provided: dump db specific table
    else
        mysqldump -t -u $MARIADB_USER -p$MARIADB_PASSWORD -h $MARIADB_HOST $1 $2 | pv > "$1___${2// /__}.sql"
    fi
}


# Genetare a psql dump
# USAGE: generatepsqldump <db name> [<table name>]
generatepsqldump()
{
    # no table provided: dump all the db
    if [ -z "$2" ]
    then
        pg_dump --verbose -U$POSTGRES_USER -h $POSTGRES_HOST -d $1 > "$1.psql"

    # table provided: dump db specific tables
    else
        pg_dump --verbose -U$POSTGRES_USER -h $POSTGRES_HOST -d $1 -t ${2// / -t } > "$1___${2// /__}.psql"
    fi
}


# Set git config local with mediaocean credentials
# USAGE:
#   1 - gitconfiglocalmediaocean
gitconfiglocalmediaocean()
{
    # add local git configurations
    git config --local user.email ckrauthamer@mediaocean.com
    git config --local user.name "Caio Krauthamer"
    git config --local core.editor vim
}


# Install dependencies
# USAGE
#   1 - installdeps <"upgrade" to upgrade pandas> [pip requirements file (default: requirements.txt)]
installdeps()
{
    # install node dependencies
    npm ci

    # no env name provided: using default env
    if [ -z $2 ]
    then
        pip install -r requirements.txt
    else
        pip install -r $2
    fi

    # upgrade numpy and pandas
    if [ $1 == "upgrade" ]
    then
        pip install numpy pandas --upgrade
    fi

    # run python stuff
    python -m nltk.downloader punkt stopwords
}

# ---------------------------------------------------------------------- #
# ------------------------------ HELP ---------------------------------- #
# ---------------------------------------------------------------------- #

# Print all available commands and how to use it
# USAGE: bashmediaoceanhelp
bashmediaoceanhelp() {
    printf "==========================MEDIA OCEAN COMMANDS==========================\n\n\n"

    printf "==========Apply mysql dump==========\n"
    printf "     applymysqldump <db name> [<table name>]\n\n"

    printf "==========Apply psql dump==========\n"
    printf "     applypsqldump <db name> [<table names (separated by a whitespace)>]\n\n"

    printf "==========Activate virtual environment==========\n"
    printf "     activate [env name (default: 'env')\n\n"

    printf "==========Connect to deploy server==========\n"
    printf "     connectdeploy\n\n"

    printf "==========Copy bashes to remote machine==========\n"
    printf "     copybashtoremotemachine <remote machine name>\n\n"

    printf "==========Start ctv development server==========\n"
    printf "     ctvstart\n\n"

    printf "==========Enter mysql==========\n"
    printf "     entermysql\n\n"

    printf "==========Enter postgres==========\n"
    printf "     enterpsql\n\n"

    printf "==========Generate mysql dump==========\n"
    printf "     generatemysqldump <db name> [<table name>]\n\n"

    printf "==========Generate psql dump==========\n"
    printf "     generatepsqldump <db name> [<table names (separated by a whitespace)>]\n\n"

    printf "==========Config Git Locally==========\n"
    printf "     gitconfiglocalmediaocean(gclm)\n\n"

    printf "==========Install project dependencies==========\n"
    printf "     installdeps <\"upgrade\" or \"no\"> [requirements file (default: 'requirements.txt')\n\n"

    printf "==========Install pre commit==========\n"
    printf "     installprecommit\n\n"

    printf "==========Run Linter==========\n"
    printf "     lint\n\n"

    printf "==========Enter vf2 shell==========\n"
    printf "     vf2shell\n\n"

    printf "==========Start vf2 development server==========\n"
    printf "     vf2start\n\n"

    printf "==========Get latest master branch==========\n"
    printf "     sm\n\n"
}
